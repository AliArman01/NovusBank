const express = require('express');
const app = express();
const redis = require('redis');
const redisClient = redis.createClient();
var plivo = require('plivo');

// Make call to the destination number with OTP.
app.get('/dispatch_otp/:number', function(req, res) {
    const number = (req.params.number);
    const code = Math.floor(100000 + Math.random() * 900000);

    var client = new plivo.Client(" MANJDLMTUXYZMZZJA5NT", "ZTkyOTAwODc0Njg1NDkwMmIyYjJhMDBhOGJhMTM0");
    var response = client.calls.create(
        "+14151234567", // from
        number, // to
        "https://twofa-answerurl.herokuapp.com/answer_url/" + code, // answer url
        {
            answerMethod: "GET",
        },
    )
    console.log(response)
    redisClient.set(`number:${number}:code`, code, 'EX', 60);
    res.send(JSON.stringify({
        'status': 'success',
        'message': 'verification initiated'
    }));
});

// Validate the OTP entered by the user.
app.get('/verify_otp/:number/:code', function(req, res) {
    const number = (req.params.number);
    const code = (req.params.code);
    redisClient.get(`number:${number}:code`, function(err, OriginalCode) {
        if (OriginalCode == code) {
            redisClient.del(`number:${number}:code`);
            res.send(JSON.stringify({
                'status': 'success',
                'message': 'codes match! number verified'
            }));
        } else if (OriginalCode != code) {
            res.send(JSON.stringify({
                'status': 'failure',
                'message': 'codes do not match! number not verified'
            }));
        } else {
            res.send(JSON.stringify({
                'status': 'failure',
                'message': 'number not found!'
            }));
        }
    });
});

app.listen(5000);



const nexmo = new Nexmo({
    apiKey: ' MANJDLMTUXYZMZZJA5NT',
    apiSecret: 'ZTkyOTAwODc0Njg1NDkwMmIyYjJhMDBhOGJhMTM0',
  }, {debug: true});
  
exports.getMessege = (req,res,next)=>{
  res.render('sms-page');
}

exports.postMessege = async (req,res,next) =>{
    try{

            nexmo.message.sendSms('NEXMO', req.body.toNumber,
             req.body.message,
              {type: 'unicode'},
               (err, responseData) => {
                if (responseData){
                    console.log(responseData);
                    res.send(responseData);
                }
            });
          }
    catch (error) {
        const status = error.statusCode || 500;
        res.status(status).json({ error: error.data })
      }
    
}


import { generateRandomSixDigitsNumber } from './randon-number';
import { redisClient } from './redis-client';
import { twilioClient } from './twillio-client';

app.post('/send-code', async (req, res) => {
  const recipientPhoneNumber = req.body.phoneNumber;
  const randomNumber = generateRandomSixDigitsNumber();

  const message = `Hello from Teco Blog! Your verification code is: ${randomNumber}`;

  await redisClient.set(recipientPhoneNumber, `${randomNumber}`, 'EX', 600);

  const response = await twilioClient.messages.create({
    from: process.env.TWILIO_PHONE_NUMBER,
    to: recipientPhoneNumber,
    body: message,
  });

  return res.json({ message: `Message sent with id: ${response.sid}` });
});